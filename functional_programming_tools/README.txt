ЗАДАНИЕ №1 (см. shapes.py)

    Используя библиотеку simple_draw сделать функцию-фабрику,
    которая возвращает функции рисования треугольника, четырехугольника, пятиугольника и т.д.

    Функция рисования должна принимать параметры
    - точка начала рисования
    - угол наклона
    - длина стороны

    Функция-фабрика должна принимать параметр n - количество сторон.


ЗАДАНИЕ №2 (см. prime_numbers.py)

  Есть функция генерации списка простых чисел

     Часть 1
     На основе алгоритма get_prime_numbers создать класс итерируемых обьектов,
     который выдает последовательность простых чисел до n

     Распечатать все простые числа до 10000 в столбик


     Часть 2
     Теперь нужно создать генератор, который выдает последовательность простых чисел до n
     Распечатать все простые числа до 10000 в столбик


     Часть 3
     Написать несколько функций-фильтров, которые выдает True, если число:
     1) "счастливое" в обыденном пониманиии - сумма первых цифр равна сумме последних
           Если число имеет нечетное число цифр (например 727 или 92083),
           то для вычисления "счастливости" брать равное количество цифр с начала и конца:
               727 -> 7(2)7 -> 7 == 7 -> True
               92083 -> 92(0)83 -> 9+2 == 8+3 -> True
     2) "палиндромное" - одинаково читающееся в обоих направлениях. Например 723327 и 101
     3) придумать свою (https://clck.ru/GB5Fc в помощь)
        # Подумать, как можно применить функции-фильтры к полученной последовательности простых чисел
     для получения, к примеру: простых счастливых чисел, простых палиндромных чисел,
     простых счастливых палиндромных чисел и так далее. Придумать не менее 2х способов.

     Подсказка: возможно, нужно будет добавить параметр в итератор/генератор.


ЗАДАНИЕ №3 (см. log_parser.py)

    Необходимо написать итератор (или генератор)
    котрый читает исходный файл events.txt и выдает число событий NOK за каждую минуту
    <время> <число повторений>

    пример использования:

    grouped_events = <создание итератора/генератора>  # Итератор или генератор? выбирайте что вам более понятно
    for group_time, event_count in grouped_events:
     print(f'[{group_time}] {event_count}')

    на консоли должно появится что-то вроде

    [2018-05-17 01:57] 1234


ЗАДАНИЕ №4 (см. error_log_decorator.py)

    Написать декоратор, который будет логировать (записывать в лог файл)
    ошибки из декорируемой функции и выбрасывать их дальше.

    Имя файла лога - function_errors.log
    Формат лога: <имя функции> <параметры вызова> <тип ошибки> <текст ошибки>
    Лог файл открывать каждый раз при ошибке в режиме 'a'
    Проверить работу на представленных функциях
    Усложненное задание (делать по желанию).
    Написать декоратор с параметром - именем файла
